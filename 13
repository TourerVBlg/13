#include <iostream>
#include <queue>
#include <vector>

using namespace std;

const int MAXN = 100005;
vector<int> adj[MAXN];
int dist[MAXN];

void bfs(int s) {
    queue<int> q;
    q.push(s);
    dist[s] = 0;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (auto v : adj[u]) {
            if (dist[v] == -1) {
                dist[v] = dist[u] + 1;
                q.push(v);
            }
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // инициализация массива расстояний
    for (int i = 1; i <= n; i++) {
        dist[i] = -1;
    }

    // запускаем BFS из каждой вершины графа
    for (int i = 1; i <= n; i++) {
        bfs(i);
        for (int j = 1; j <= n; j++) {
            if (dist[j] == 3) {
                cout << i << " " << j << endl;
            }
        }
        // обнуляем массив расстояний для следующего запуска BFS
        for (int j = 1; j <= n; j++) {
            dist[j] = -1;
        }
    }
    return 0;
}
